/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.infrastructure.http.external.api;

import com.example.demo.infrastructure.http.external.model.ProductDetail;
import java.util.Set;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-25T17:09:46.940004500+01:00[Europe/Madrid]")
@Validated
@Api(value = "product", description = "the product API")
public interface ProductApi {

    /**
     * GET /product/{productId} : Gets a product detail
     * Returns the product detail for a given productId
     *
     * @param productId  (required)
     * @return OK (status code 200)
     *         or Product Not found (status code 404)
     */
    @ApiOperation(value = "Gets a product detail", nickname = "getProductProductId", notes = "Returns the product detail for a given productId", response = ProductDetail.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDetail.class),
        @ApiResponse(code = 404, message = "Product Not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{productId}",
        produces = { "application/json" }
    )
    ResponseEntity<ProductDetail> getProductProductId(@ApiParam(value = "", required = true) @PathVariable("productId") String productId);


    /**
     * GET /product/{productId}/similarids : Gets the ids of the similar products
     * Returns the similar products to a given one ordered by similarity
     *
     * @param productId  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Gets the ids of the similar products", nickname = "getProductSimilarids", notes = "Returns the similar products to a given one ordered by similarity", response = String.class, responseContainer = "Set", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "Set") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{productId}/similarids",
        produces = { "application/json" }
    )
    ResponseEntity<Set<String>> getProductSimilarids(@ApiParam(value = "", required = true) @PathVariable("productId") String productId);

}
